1、实现了统一的request方法封装，能够支持get/post/put/delete等请求方法
2、通过TestNG的DataProvider机制实现数据驱动测试
    通过Excel来维护我们的接口用例（编号、标题、优先级、请求方法、接口地址、请求头、请求参数...）
    通过Java代码将Excel中的用例数据读取出来-阿里巴巴的EasyExcel
    通过DataProvider设置数据提供源，将其注入到测试方法中执行
3、优化代码-良好分层管理设计模式
    pojo层-放置Java实体类
    testcases层-放置测试用例类 -TestNG的DataProvider机制实现数据驱动测试
    common层-放置测试用例公共方法/公共类 - 必需品
    util层-放置一些工具类，比如Excel文件操作/数据库操作/..
4、testng.xml管理我们要运行测试用例类
5、集成第三方日志库-Log4J ,四个日志级别 debug->info->warn->error
    将日志持久化存储到文件中
    日志输出的定制化
    日志在什么时候/什么地方记录：请求信息/响应信息/断言
6、断言设计：通过Excel来维护断言信息，格式：JSON字符串
    通过Java代码解析转换为Map，之后进行循环遍历取出来Map中每一组键值对，再做断言
    断言日志
7、集成第三方的报告库-Allure

8、接口关联的处理
    在Excel中新增一列【提取响应】，用来维护我们接口请求完之后要提取的响应信息，格式：JSON字符串
    使用方式：类似于postman的{{XXX}}引用方法来使用
    框架代码实现：
    （1）接口请求完毕之后增加提取响应功能的代码
    （2）参考postman设计类似于环境变量区域 - HashMap<String,Object>
    （3）在需要通过{{XXX}}引用的地方来进行替换：
        识别{{XXX}} - 正则表达式  {{.*?}}
        在环境变量区域中找到XXX变量名对应的值
        再将{{XXX}}替换为值
    引用规则->自定义，postman：{{XXX}}  Jmeter：${XXX}

9、支付流程的处理
    在支付的页面，前端会一直不断的发起接口请求：查询订单的支付状态，需要去知道订单的支付状态
    通过接口自动化走真实支付流程：
    （1）调用手机里面微信/支付宝App，通过扫一扫支付 - 不够稳定
    （2）真实账户资金损耗
    解决方案：
    绕过真实支付流程，通过模拟支付的手段来实现

-------Allure Report ------

   生成Allure报告
   通过maven命令构建自动化测试
   在terminal里面输入mvn test
   注意：要生成Allure的报表，必须要通过mvn test去执行，不能通过选择测试类执行或者TestNG.xml执行。
   生成可视化Allure报表
   mvn io.qameta.allure:allure-maven:serve